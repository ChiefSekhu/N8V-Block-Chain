#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{decl_module, decl_storage, decl_event, dispatch};
use frame_system::ensure_signed;

pub trait Trait: frame_system::Trait {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Trait>::Event>;
}

decl_storage! {
    trait Store for Module<T: Trait> as CustomTokensModule {
        Tokens get(fn tokens): map hasher(blake2_128_concat) T::AccountId => Vec<(Vec<u8>, u64)>;
    }
}

decl_event!(
    pub enum Event<T> where AccountId = <T as frame_system::Trait>::AccountId {
        TokenCreated(AccountId, Vec<u8>, u64),
        TokenTransferred(AccountId, AccountId, Vec<u8>, u64),
    }
);

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        #[weight = 10_000]
        pub fn create_token(origin, name: Vec<u8>, initial_supply: u64) -> dispatch::DispatchResult {
            let creator = ensure_signed(origin)?;

            let mut tokens = Self::tokens(&creator);
            tokens.push((name.clone(), initial_supply));
            <Tokens<T>>::insert(&creator, tokens);

            Self::deposit_event(RawEvent::TokenCreated(creator, name, initial_supply));
            Ok(())
        }

        #[weight = 10_000]
        pub fn transfer_token(origin, to: T::AccountId, name: Vec<u8>, amount: u64) -> dispatch::DispatchResult {
            let sender = ensure_signed(origin)?;

            let mut sender_tokens = Self::tokens(&sender);
            let mut receiver_tokens = Self::tokens(&to);

            // Implement token transfer logic here
            // ...

            Self::deposit_event(RawEvent::TokenTransferred(sender, to, name, amount));
            Ok(())
        }
    }
}
